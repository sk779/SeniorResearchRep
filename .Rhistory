mean(degree(d,vic_ids))
mean(degree(d,rand_vics))
dnv=set.vertex.attribute(d, 'vic', index=V(d), 0)
nvics = sum(get.vertex.attribute(d,'vic')==1)
rand_vics = sample(V(d), nvics, prob=log((3+degree(dnv))))
dnv=set.vertex.attribute(d, 'vic', index=rand_vics, 1)
dnv
lcc=dnv
mean(transitivity(lcc,type='local',vids=vic_ids,isolates='zero'))
mean(transitivity(lcc,type='local',vids=rand_vics,isolates='zero'))
mean(shortest.paths(lcc,vic_ids,vic_ids))
mean(shortest.paths(lcc,rand_vics,rand_vics))
dnv=set.vertex.attribute(d, 'vic', index=V(d), 0)
rand_vics = sample(V(d), nvics,prob=degree(dnv))#, prob=log((3+degree(dnv))))
mean(transitivity(lcc,type='local',vids=rand_vics,isolates='zero'))
mean(transitivity(lcc,type='local',vids=rand_vics,isolates='zero'))
mean(shortest.paths(lcc,rand_vics,rand_vics))
lcc
degree.distribution(lcc)
table(degree.distribution(lcc))
plot(degree.distribution(lcc))
lcc
d=d15b
subnet=d
compid = which.max(clusters(subnet)$csize)
lcc = induced.subgraph(subnet,which(clusters(subnet)$membership==compid))
lcc
d=lcc
lccnv=delete.vertices(lcc,vic_ids)
lccnv
clusters(lccnv)
c=clusters(lccnv)
c$size
c$no
table(c$csize)
nvics = sum(get.vertex.attribute(d,'vic')==1)
rand_vics = sample(V(lcc), nvics)#, prob=log((3+degree(dnv))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
c$no
table(c$csize)
plot(c$csize)
plot(table(c$csize))
nvics = sum(get.vertex.attribute(d,'vic')==1)
rand_vics = sample(V(lcc), nvics,prob=degree(lcc))#, prob=log((3+degree(dnv))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
c$no
table(c$csize)
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(dnv))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
c$no
table(c$csize)
average.path.length(lccnv)
average.path.length(lccnv,unconnected=FALSE)
transitivity(lccnv,type='global')
mean(transitivity(lccnv,type='local',isolates='zero'))
transitivity(lcc)
lccnv=delete.vertices(lcc,vic_ids)
c=clusters(lccnv)
c$no
table(c$csize)
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(dnv))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
c$no
table(c$csize)
t=table(c$csize)
dim(t)
t[1]
max(c$csize)
table(c$csize)[1]
n=m=t=rep(0,100)
dim(table(c$csize)[1])
table(c$csize)[[1]]
for (i in 1:100){
nvics = sum(get.vertex.attribute(d,'vic')==1)
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(dnv))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
}
n
mean(n)
mean(m)
mean(t)
for (i in 1:1000){
nvics = sum(get.vertex.attribute(d,'vic')==1)
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(dnv))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
}
mean(n)
mean(n)
sd(n)
mean(m)
sd(m)
mean(t)
sd((t))
sd(t)
options(digits==3)
options(digits=3)
sd(t)
options()
options(digits=FALSE)
sd(t)
sd(m)
options(digits=TRUE)
sd(m)
library(igraph)
load("/Users/Ben/Documents/Yale/Senior Year/Spring 2014/Sociology 472 Individual Study/Example Chicago Networks/district15.RData")
d=d15b
vic_ids = which(V(d)$vic==TRUE)  #V(d)[get.vertex.attribute(d,'vic')==1]
non_vic_ids = which(V(d)$vic==FALSE)  #V(d)[get.vertex.attribute(d,'vic')==0]
subnet=d\
subnet=d
compid = which.max(clusters(subnet)$csize)
lcc = induced.subgraph(subnet,which(clusters(subnet)$membership==compid))
vic_ids = which(V(lcc)$vic==TRUE)  #V(d)[get.vertex.attribute(d,'vic')==1]
non_vic_ids = which(V(lcc)$vic==FALSE)  #V(d)[get.vertex.attribute(d,'vic')==0]
degree(lcc,vic_ids)
table(degree(lcc,vic_ids))
table(degree(lcc,non_vic_ids))
mean(degree(lcc,vic_ids))
nvics = sum(get.vertex.attribute(d,'vic')==1)
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(dnv))))
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(lcc))))
mean(degree(lcc,rand_vics))
n=m=t=rep(0,100)
for (i in 1:1000){
nvics = sum(get.vertex.attribute(d,'vic')==1)
rand_vics = sample(V(lcc), nvics)#, prob=log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
}
mean(n)
lccnv
n=m=t=rep(0,100)
lcc
nvics
nvics = sum(get.vertex.attribute(lcc,'vic')==1)
for (i in 1:1000){
rand_vics = sample(V(lcc), nvics)#, prob=log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
}
mean(n)
lccnv
sd(n)
mean(m)
sd(m)
mean(t)
sd(t)
for (i in 1:1000){
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
}
for (i in 1:100){
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
}
mean(n)
mean(m)
for (i in 1:1000){
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
}
mean(n)
mean(m)
mean(t)
lccnv=delete.vertices(lcc,vic_ids)
c=clusters(lccnv)
c$no
table(c$csize)
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
mean(degree(lccnv,rand_vics))
lccnv
mean(degree(lccnv,vic_ids))
mean(degree(lcc,vic_ids))
mean(degree(lcc,rand_vics))
rand_vics = sample(V(lcc), nvics, prob=log((3+2*degree(lcc))))
mean(degree(lcc,rand_vics))
rand_vics = sample(V(lcc), nvics, prob=log((3+2*degree(lcc))))
mean(degree(lcc,rand_vics))
rand_vics = sample(V(lcc), nvics, prob=log((3+2*degree(lcc))))
mean(degree(lcc,rand_vics))
rand_vics = sample(V(lcc), nvics, prob=log((3+5*degree(lcc))))
mean(degree(lcc,rand_vics))
rand_vics = sample(V(lcc), nvics, prob=log((3+10*degree(lcc))))
mean(degree(lcc,rand_vics))
table(degree(lcc,rand_vics))
table(degree(lcc,vic_ids))
degree.distribution(lcc,vic_ids)
plot(degree.distribution(lcc,vic_ids))
plot(table(lcc,vic_ids))
plot(table(degree((lcc,vic_ids))))
plot(degree.distribution(lcc,v=vic_ids))
plot(degree.distribution(lcc,v=rand_vics))
plot(degree.distribution(lcc,v=vic_ids))
c$no
plot(degree(lcc,v=vic_ids))
plot(table(degree(lcc,v=vic_ids)))
plot(1:29,55 79 55 54 44 24 18 30 13 16 11  7 10  8  3  3  7  5  3  3  1  2  1  2  1 )
tmp=c(55, 79, 55, 54, 44, 24, 18, 30, 13, 16, 11,  7, 10,  8,  3,  3,  7,  5,  3,  3,  1, 2,  1,  2,  1 )
tmp
plot(1:29,tmp)
dim(tmp)
tmp
tmp[2]
prob=degree(lcc))#
prob=degree(lcc)
prob
for (i in 1:1000){
rand_vics = sample(V(lcc), nvics, prob=degree(lcc))#log((3+10*degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
}
mean(n)
mean(degree(lcc,rand_vics))
lccnv=delete.vertices(lcc,vic_ids)
mean(degree(lcc,vic_ids))
for (i in 1:1000){
rand_vics = sample(V(lcc), nvics, prob=degree(lcc))#log((3+10*degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
d[i] = mean(degree(lcc,rand_vics))
}
i
mean(degree(lcc,rand_vics))
mean(degree(lcc,rand_vics))
mean(degree(lcc,rand_vics))
n
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
d[i] = mean(degree(lcc,rand_vics))
for (i in 1:100){
rand_vics = sample(V(lcc), nvics, prob=degree(lcc))#log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
d[i] = mean(degree(lcc,rand_vics))
}
i
n=m=t=d=rep(0,100)
nvics = sum(get.vertex.attribute(lcc,'vic')==1)
nvics
d[i] = mean(degree(lcc,rand_vics))
d
d[i] = mean(degree(lcc,rand_vics))
rand_vics = sample(V(lcc), nvics, prob=degree(lcc))#log((3+degree(lcc))))
d[i] = mean(degree(lcc,rand_vics))
for (i in 1:100){
rand_vics = sample(V(lcc), nvics, prob=degree(lcc))#log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
#d[i] = mean(degree(lcc,rand_vics))
}
for (i in 1:100){
rand_vics = sample(V(lcc), nvics, prob=degree(lcc))#log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
d[i] = mean(degree(lcc,rand_vics))
}
mean(n)
sd(n)
mean(m)
mean(n)
sd(m)
mean(t)
sd(t)
mean(d)
sd(d)
n=m=t=d=rep(0,100)
nvics = sum(get.vertex.attribute(lcc,'vic')==1)
for (i in 1:100){
rand_vics = sample(V(lcc), nvics)#log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
d[i] = mean(degree(lcc,rand_vics))
}
mean(d)
sd(d)
mean(n)
sd(n)
mean(m)
sd(m)
mean(t)
sd(t)
n=m=t=d=rep(0,100)
nvics = sum(get.vertex.attribute(lcc,'vic')==1)
for (i in 1:100){
rand_vics = sample(V(lcc), nvicslog((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
d[i] = mean(degree(lcc,rand_vics))
}
n=m=t=d=rep(0,100)
nvics = sum(get.vertex.attribute(lcc,'vic')==1)
for (i in 1:100){
rand_vics = sample(V(lcc), nvics)log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
d[i] = mean(degree(lcc,rand_vics))
}
n=m=t=d=rep(0,100)
nvics = sum(get.vertex.attribute(lcc,'vic')==1)
for (i in 1:100){
rand_vics = sample(V(lcc), nvics, prob=log((3+degree(lcc))))
lccnv=delete.vertices(lcc,rand_vics)
c=clusters(lccnv)
n[i] = c$no
m[i] = max(c$csize)
t[i] = table(c$csize)[[1]]
d[i] = mean(degree(lcc,rand_vics))
}
mean(n)
sd(n)
mean(m)
sd(m)
mean(t)
sd(t)
mean(d)
sd(d)
lcc
nvics
455/6890
lcc
vic_ids
table(degree(lcc))
hist(degree(lcc))
h=hist(degree(lcc))
h
table(degree(lcc))
table(degree(lcc,vics=vic_ids))
table(degree(lcc,vids=vic_ids))
table(degree(lcc,v=vic_ids))
table(degree(lcc))
ReadPairs <- function (fn) {
# Read in a pairs file, and fill in a list with useful information. This also rebins the data in r
# Args :
#   fn : filename
# Outputs :
#     pairs : array (nmu, nr) of pair counts
ff <- gzfile(fn, "r")
# Read in rbins
rbins <- scan(ff,numeric(0),nlines=1)
nrbins <- length(rbins)-1
mubins <- scan(ff, numeric(0),nlines=1)
nmubins <- length(mubins)-1
pairs <- array(scan(ff, numeric(0)), c(nmubins, nrbins))
close(ff)
list(rbins=rbins, mubins=mubins, pairs=pairs)
}
ReadNorm <- function(fn) {
# Read in the norm file
read.table(fn)[,2]
}
# Process the pairs file
# Here, we assume that this is generated assuming purely periodic boundary conditions
# Therefore RR is completely isotropic and can be analytically estimated.
setwd('/Users/Ben/Documents/Yale/Senior Year/Spring 2014/Physics 472 Independent Projects in Physics/SeniorResearchRep')
dfile = '../data/gals2mil'#_2mil_hs3'
pp <- ReadPairs(paste(dfile,"DD.dat",sep='-'))
norm <- ReadNorm(paste(dfile,"norm.dat",sep='-'))
Lbox <- 1000.0
density <- norm/(Lbox^3)
dd <- colSums(pp$pairs)
# dr <- colSums(pq$pairs)
# rr <- colSums(qq$pairs)
rlo <- pp$rbins[-length(pp$rbins)]
rhi <- pp$rbins[-1]
# These parameters define the logarithmic bins
rmin <- 0.3
rmax <- 200
nbins <- 200
logbins <- exp(seq(log(rmin),log(rmax),length.out=nbins))
ir <- cut(rlo, logbins, right=TRUE)
# Make data frame
df <- data.frame(ir=ir, rlo=rlo, rhi=rhi, dd=dd)#,dr=dr,rr=rr)
xi <- na.omit(ddply(df, .(ir), summarise, rmin=min(rlo), rmax=max(rhi), ddsum=sum(dd)))#,drsum=sum(dr),rrsum=sum(rr)))
xi$rrsum <- (4*pi/3)*((xi$rmax^3) - (xi$rmin^3))*density*norm
xi$xi <- xi$ddsum/xi$rrsum - 1
xi$r0 <- sqrt(xi$rmin*xi$rmax)
library(plyr)
library(ggplot2)
ReadPairs <- function (fn) {
# Read in a pairs file, and fill in a list with useful information. This also rebins the data in r
# Args :
#   fn : filename
# Outputs :
#     pairs : array (nmu, nr) of pair counts
ff <- gzfile(fn, "r")
# Read in rbins
rbins <- scan(ff,numeric(0),nlines=1)
nrbins <- length(rbins)-1
mubins <- scan(ff, numeric(0),nlines=1)
nmubins <- length(mubins)-1
pairs <- array(scan(ff, numeric(0)), c(nmubins, nrbins))
close(ff)
list(rbins=rbins, mubins=mubins, pairs=pairs)
}
ReadNorm <- function(fn) {
# Read in the norm file
read.table(fn)[,2]
}
# Process the pairs file
# Here, we assume that this is generated assuming purely periodic boundary conditions
# Therefore RR is completely isotropic and can be analytically estimated.
setwd('/Users/Ben/Documents/Yale/Senior Year/Spring 2014/Physics 472 Independent Projects in Physics/SeniorResearchRep')
dfile = '../data/gals2mil'#_2mil_hs3'
pp <- ReadPairs(paste(dfile,"DD.dat",sep='-'))
norm <- ReadNorm(paste(dfile,"norm.dat",sep='-'))
Lbox <- 1000.0
density <- norm/(Lbox^3)
dd <- colSums(pp$pairs)
# dr <- colSums(pq$pairs)
# rr <- colSums(qq$pairs)
rlo <- pp$rbins[-length(pp$rbins)]
rhi <- pp$rbins[-1]
# These parameters define the logarithmic bins
rmin <- 0.3
rmax <- 200
nbins <- 200
logbins <- exp(seq(log(rmin),log(rmax),length.out=nbins))
ir <- cut(rlo, logbins, right=TRUE)
# Make data frame
df <- data.frame(ir=ir, rlo=rlo, rhi=rhi, dd=dd)#,dr=dr,rr=rr)
xi <- na.omit(ddply(df, .(ir), summarise, rmin=min(rlo), rmax=max(rhi), ddsum=sum(dd)))#,drsum=sum(dr),rrsum=sum(rr)))
xi$rrsum <- (4*pi/3)*((xi$rmax^3) - (xi$rmin^3))*density*norm
xi$xi <- xi$ddsum/xi$rrsum - 1
xi$r0 <- sqrt(xi$rmin*xi$rmax)
dat=xi
dfile = '../data/gals3b'#_2mil_hs3'
pp <- ReadPairs(paste(dfile,"DD.dat",sep='-'))
norm <- ReadNorm(paste(dfile,"norm.dat",sep='-'))
Lbox <- 1000.0
density <- norm/(Lbox^3)
dd <- colSums(pp$pairs)
# dr <- colSums(pq$pairs)
# rr <- colSums(qq$pairs)
rlo <- pp$rbins[-length(pp$rbins)]
rhi <- pp$rbins[-1]
# These parameters define the logarithmic bins
rmin <- 0.3
rmax <- 200
nbins <- 200
logbins <- exp(seq(log(rmin),log(rmax),length.out=nbins))
ir <- cut(rlo, logbins, right=TRUE)
# Make data frame
df <- data.frame(ir=ir, rlo=rlo, rhi=rhi, dd=dd)#,dr=dr,rr=rr)
xi <- na.omit(ddply(df, .(ir), summarise, rmin=min(rlo), rmax=max(rhi), ddsum=sum(dd)))#,drsum=sum(dr),rrsum=sum(rr)))
xi$rrsum <- (4*pi/3)*((xi$rmax^3) - (xi$rmin^3))*density*norm
xi$xi <- xi$ddsum/xi$rrsum - 1
xi$r0 <- sqrt(xi$rmin*xi$rmax)
nupw=xi
gg <- ggplot(dat, aes(x=r0, y=abs(dat$r0^2*xi0)))
gg <- gg + geom_point() + geom_point(data = dat, aes(y = abs(dat$r0^2*xi4)), colour = 'red', size = 2)
gg <- gg + geom_point()# + scale_x_log10() + scale_y_log10()
gg <- gg + xlab("r (Mpc/h)")  + ylab(expression(xi(r)))
gg
gg <- ggplot(dat, aes(x=r0, y=dat$r0^2*xi)) + geom_text(aes(x=55,y=3,label='Data'),colour='black',size=7)
gg <- gg + geom_point() + geom_point(data = nupw, aes(y = dat$r0^2*xi), colour = 'red', size = 2) + geom_text(aes(x=55,y=0.9,label='Observed Without Correction'),colour='red',size=7)
gg
